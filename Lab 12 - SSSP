#include <iostream>
#include <climits>
using namespace std;

int minDistance(int distance[], bool Tset[]) // finding minimum distance
{
    int minimum=INT_MAX,ind;
              
    for(int k=0;k<6;k++) 
    {
        if(Tset[k]==false && distance[k]<=minimum)      
        {
            minimum=distance[k];
            ind=k;
        }
    }
    return ind;
}

void DijkstraSSSP(int graph[6][6],int source) // adjacency matrix 
{
    int distance[6];   // array to calculate the minimum distance for each node                             
    bool Tset[6];      // boolean array to mark visited and unvisited for each node
    
     
    for(int i = 0; i<6; i++)
    {
        distance[i] = INT_MAX;
        Tset[i] = false;    
    }
    
    distance[source] = 0;   // Source vertex distance is set 0               
    
    for(int k = 0; k<6; k++)                           
    {
        int m=minDistance(distance,Tset); 
        Tset[m]=true;
        for(int k = 0; k<6; k++)                  
        {
            // updating the distance of neighbouring vertex
            if(!Tset[k] && graph[m][k] && distance[m]!=INT_MAX && distance[m]+graph[m][k]<distance[k])
                distance[k]=distance[m]+graph[m][k];
        }
    }
    cout<<"city\t\tTime taken"<<endl;
    int sum = 0;
    for(int k = 0; k<6; k++)                      
    { 
        cout<< k << "\t\t\t" << distance[k] << endl;
        sum += distance[k];
    }

    double average = sum/5 ;
    cout << "The average is " << average ;
}

int main()
{
    int graph[6][6]={
        {0, 10, 0, 0, 15, 5},
        {10, 0, 10, 30, 0, 0},
        {0, 10, 0, 12, 5, 0},
        {0, 30, 12, 0, 0, 20},
        {15, 0, 5, 0, 0, 0},
        {5, 0, 0, 20, 0, 0},
        };
    DijkstraSSSP(graph,5);
    return 0;                           
}
